/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ContactsLazyImport = createFileRoute('/contacts')()
const IndexLazyImport = createFileRoute('/')()
const ContactsIndexLazyImport = createFileRoute('/contacts/')()
const ContactsCreateLazyImport = createFileRoute('/contacts/create')()
const ContactsIdLazyImport = createFileRoute('/contacts/$id')()

// Create/Update Routes

const ContactsLazyRoute = ContactsLazyImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contacts.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ContactsIndexLazyRoute = ContactsIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ContactsLazyRoute,
} as any).lazy(() =>
  import('./routes/contacts/index.lazy').then((d) => d.Route),
)

const ContactsCreateLazyRoute = ContactsCreateLazyImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => ContactsLazyRoute,
} as any).lazy(() =>
  import('./routes/contacts/create.lazy').then((d) => d.Route),
)

const ContactsIdLazyRoute = ContactsIdLazyImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ContactsLazyRoute,
} as any).lazy(() => import('./routes/contacts/$id.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/contacts': {
      id: '/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof ContactsLazyImport
      parentRoute: typeof rootRoute
    }
    '/contacts/$id': {
      id: '/contacts/$id'
      path: '/$id'
      fullPath: '/contacts/$id'
      preLoaderRoute: typeof ContactsIdLazyImport
      parentRoute: typeof ContactsLazyImport
    }
    '/contacts/create': {
      id: '/contacts/create'
      path: '/create'
      fullPath: '/contacts/create'
      preLoaderRoute: typeof ContactsCreateLazyImport
      parentRoute: typeof ContactsLazyImport
    }
    '/contacts/': {
      id: '/contacts/'
      path: '/'
      fullPath: '/contacts/'
      preLoaderRoute: typeof ContactsIndexLazyImport
      parentRoute: typeof ContactsLazyImport
    }
  }
}

// Create and export the route tree

interface ContactsLazyRouteChildren {
  ContactsIdLazyRoute: typeof ContactsIdLazyRoute
  ContactsCreateLazyRoute: typeof ContactsCreateLazyRoute
  ContactsIndexLazyRoute: typeof ContactsIndexLazyRoute
}

const ContactsLazyRouteChildren: ContactsLazyRouteChildren = {
  ContactsIdLazyRoute: ContactsIdLazyRoute,
  ContactsCreateLazyRoute: ContactsCreateLazyRoute,
  ContactsIndexLazyRoute: ContactsIndexLazyRoute,
}

const ContactsLazyRouteWithChildren = ContactsLazyRoute._addFileChildren(
  ContactsLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/contacts': typeof ContactsLazyRouteWithChildren
  '/contacts/$id': typeof ContactsIdLazyRoute
  '/contacts/create': typeof ContactsCreateLazyRoute
  '/contacts/': typeof ContactsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/contacts/$id': typeof ContactsIdLazyRoute
  '/contacts/create': typeof ContactsCreateLazyRoute
  '/contacts': typeof ContactsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/contacts': typeof ContactsLazyRouteWithChildren
  '/contacts/$id': typeof ContactsIdLazyRoute
  '/contacts/create': typeof ContactsCreateLazyRoute
  '/contacts/': typeof ContactsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contacts'
    | '/contacts/$id'
    | '/contacts/create'
    | '/contacts/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/contacts/$id' | '/contacts/create' | '/contacts'
  id:
    | '__root__'
    | '/'
    | '/contacts'
    | '/contacts/$id'
    | '/contacts/create'
    | '/contacts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ContactsLazyRoute: typeof ContactsLazyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ContactsLazyRoute: ContactsLazyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/contacts"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/contacts": {
      "filePath": "contacts.lazy.tsx",
      "children": [
        "/contacts/$id",
        "/contacts/create",
        "/contacts/"
      ]
    },
    "/contacts/$id": {
      "filePath": "contacts/$id.lazy.tsx",
      "parent": "/contacts"
    },
    "/contacts/create": {
      "filePath": "contacts/create.lazy.tsx",
      "parent": "/contacts"
    },
    "/contacts/": {
      "filePath": "contacts/index.lazy.tsx",
      "parent": "/contacts"
    }
  }
}
ROUTE_MANIFEST_END */
